<?xml version="1.0"?>
<doc>
    <assembly>
        <name>COMMON</name>
    </assembly>
    <members>
        <member name="T:System.Data.IPage">
            <summary>
            分页接口
            </summary>
        </member>
        <member name="P:System.Data.IPage.PageIndex">
            <summary>
            页面索引
            </summary>
        </member>
        <member name="P:System.Data.IPage.PageSize">
            <summary>
            分页记录条数
            </summary>
        </member>
        <member name="P:System.Data.IPage.TotalCount">
            <summary>
            总记录条数
            </summary>
        </member>
        <member name="P:System.Data.IPage.TotalPages">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:System.Data.IPage.HasPreviousPage">
            <summary>
            是否有前一页
            </summary>
        </member>
        <member name="P:System.Data.IPage.HasNextPage">
            <summary>
            是否有下一页
            </summary>
        </member>
        <member name="M:System.Data.PagedList`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Data.PagedList`1.#ctor(System.Linq.IQueryable{`0},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
        </member>
        <member name="M:System.Data.PagedList`1.#ctor(System.Collections.Generic.IList{`0},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
        </member>
        <member name="M:System.Data.PagedList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalCount"></param>
        </member>
        <member name="P:System.Data.PagedList`1.PageIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:System.Data.PagedList`1.PageSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:System.Data.PagedList`1.TotalCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:System.Data.PagedList`1.TotalPages">
            <summary>
            
            </summary>
        </member>
        <member name="P:System.Data.PagedList`1.HasPreviousPage">
            <summary>
            
            </summary>
        </member>
        <member name="P:System.Data.PagedList`1.HasNextPage">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Data.ResultEntity`1.BindAllException(System.Exception)">
            <summary>
            绑定所有异常
            </summary>
            <param name="ex">传入顶级异常</param>
        </member>
        <member name="M:System.Data.ResultEntity`1.GetAllExceptionMessage(System.Boolean,System.String)">
            <summary>
            返回异常所有信息
            </summary>
            <param name="webHuanHang">是否为web换行</param>
            <param name="style">样式: color:red;  </param>
            <returns></returns>
        </member>
        <member name="P:System.Data.ResultEntity`1.Success">
            <summary>
            表示执行是否成功(默认true)
            </summary>
        </member>
        <member name="P:System.Data.ResultEntity`1.Code">
            <summary>
            执行返回代码
            </summary>
        </member>
        <member name="P:System.Data.ResultEntity`1.Message">
            <summary>
            执行返回消息
            </summary>
        </member>
        <member name="P:System.Data.ResultEntity`1.Data">
            <summary>
            执行返回结果
            </summary>
        </member>
        <member name="P:System.Data.ResultEntity`1.HasException">
            <summary>
            是否包含异常
            </summary>
        </member>
        <member name="P:System.Data.ResultEntity`1.ExceptionCollection">
            <summary>
            异常集合
            </summary>
        </member>
        <member name="M:System.Dynamic.DynamicJson.Parse(System.String)">
            <summary>from JsonSring to DynamicJson</summary>
        </member>
        <member name="M:System.Dynamic.DynamicJson.Parse(System.String,System.Text.Encoding)">
            <summary>from JsonSring to DynamicJson</summary>
        </member>
        <member name="M:System.Dynamic.DynamicJson.Parse(System.IO.Stream)">
            <summary>from JsonSringStream to DynamicJson</summary>
        </member>
        <member name="M:System.Dynamic.DynamicJson.Parse(System.IO.Stream,System.Text.Encoding)">
            <summary>from JsonSringStream to DynamicJson</summary>
        </member>
        <member name="M:System.Dynamic.DynamicJson.Serialize(System.Object)">
            <summary>create JsonSring from primitive or IEnumerable or Object({public property name:property value})</summary>
        </member>
        <member name="M:System.Dynamic.DynamicJson.#ctor">
            <summary>create blank JSObject</summary>
        </member>
        <member name="M:System.Dynamic.DynamicJson.IsDefined(System.String)">
            <summary>has property or not</summary>
        </member>
        <member name="M:System.Dynamic.DynamicJson.IsDefined(System.Int32)">
            <summary>has property or not</summary>
        </member>
        <member name="M:System.Dynamic.DynamicJson.Delete(System.String)">
            <summary>delete property</summary>
        </member>
        <member name="M:System.Dynamic.DynamicJson.Delete(System.Int32)">
            <summary>delete property</summary>
        </member>
        <member name="M:System.Dynamic.DynamicJson.Deserialize``1">
            <summary>mapping to Array or Class by Public PropertyName</summary>
        </member>
        <member name="M:System.Dynamic.DynamicJson.ToString">
            <summary>Serialize to JsonString</summary>
        </member>
        <member name="T:COMMON.Encryption.Cipher">
            <summary>
            加密解密类
            </summary>
        </member>
        <member name="M:COMMON.Encryption.Cipher.MD5Encrypt16(System.String)">
            <summary>
            MD5:16位加密
            </summary>
            <param name="EncryptString">要加密的字符串</param>
            <returns>加密后的密文</returns>
        </member>
        <member name="M:COMMON.Encryption.Cipher.MD5Encrypt32(System.String)">
            <summary>
            MD5:32位加密
            </summary>
            <param name="EncryptString">要加密的字符串</param>
            <returns>加密后的密文</returns>
        </member>
        <member name="M:COMMON.Encryption.Cipher.MD5Encrypt(System.String,System.String)">
            <summary>
            MD5可逆加密
            </summary>
            <param name="inputStr"></param>
            <param name="sKey"></param>
            <returns></returns>
        </member>
        <member name="M:COMMON.Encryption.Cipher.MD5Decrypt(System.String,System.String)">
            <summary>
            MD5解密
            </summary>
            <param name="inputStr"></param>
            <param name="sKey"></param>
            <returns></returns>
        </member>
        <member name="M:COMMON.Encryption.Cipher.DESEncrypt(System.String,System.String)">
            <summary>
            DES 加密(数据加密标准，速度较快，适用于加密大量数据的场合）
            </summary>
            <param name="EncryptString">待加密的明文</param>
            <param name="EncryptKey">加密的密钥</param>
            <returns>加密后的密文</returns>
        </member>
        <member name="M:COMMON.Encryption.Cipher.DESDecrypt(System.String,System.String)">
            <summary>
            DES 解密(数据加密标准，速度较快，适用于加密大量数据的场合）
            </summary>
            <param name="DecryptString">待解密的密文</param>
            <param name="DecryptKey">解密的密钥</param>
            <returns>解密后的明文</returns>
        </member>
        <member name="M:COMMON.Encryption.Cipher.RC2Encrypt(System.String,System.String)">
            <summary>
            RC2 加密(用变长密钥对大量数据进行加密)
            </summary>
            <param name="EncryptString">待加密密文</param>
            <param name="EncryptKey">加密密钥</param>
            <returns>returns</returns>
        </member>
        <member name="M:COMMON.Encryption.Cipher.RC2Decrypt(System.String,System.String)">
            <summary>
            RC2 解密(用变长密钥对大量数据进行加密)
            </summary>
            <param name="DecryptString">待解密密文</param>
            <param name="DecryptKey">解密密钥</param>
            <returns>returns</returns>
        </member>
        <member name="M:COMMON.Encryption.Cipher.DES3Encrypt(System.String,System.String,System.String,System.String)">
            <summary>
            3DES 加密(基于DES，对一块数据用三个不同的密钥进行三次加密，强度更高)
            </summary>
            <param name="EncryptString">待加密密文</param>
            <param name="EncryptKey1">密钥一</param>
            <param name="EncryptKey2">密钥二</param>
            <param name="EncryptKey3">密钥三</param>
            <returns>returns</returns>
        </member>
        <member name="M:COMMON.Encryption.Cipher.DES3Decrypt(System.String,System.String,System.String,System.String)">
            <summary>
            3DES 解密(基于DES，对一块数据用三个不同的密钥进行三次加密，强度更高)
            </summary>
            <param name="DecryptString">待解密密文</param>
            <param name="DecryptKey1">密钥一</param>
            <param name="DecryptKey2">密钥二</param>
            <param name="DecryptKey3">密钥三</param>
            <returns>returns</returns>
        </member>
        <member name="M:COMMON.Encryption.Cipher.AESEncrypt(System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            AES 解密(高级加密标准，是下一代的加密算法标准，速度快，安全级别高，目前 AES 标准的一个实现是 Rijndael 算法)
            </summary>
            <param name="DecryptString">待解密密文</param>
            <param name="DecryptKey">解密密钥</param>
            <returns></returns>
        </member>
        <member name="T:System.BaseClass">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.BaseClass.Clone">
            <summary>
            克隆一个对象(实现的ICloneable接口)
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.BaseClass.CloneByDotnet">
            <summary>
            使用二进制克隆
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.IO.DirectoryInfoEx.GetFilesEx(System.IO.DirectoryInfo,System.String)">
            <summary>
            查找指定文件夹下指定后缀名的文件
            </summary>
            <param name="directory">文件夹</param>
            <param name="pattern">后缀名</param>
            <returns>文件路径</returns>
        </member>
        <member name="T:System.Data.DataRowEx">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Data.DataRowEx.FillModel``1(System.Data.DataRow)">
            <summary>  
            填充对象：用DataRow填充实体类
            </summary>  
        </member>
        <member name="M:System.Data.DataSetEx.FillModel``1(System.Data.DataSet)">
            <summary>
            填充对象列表：用DataSet的第一个表填充实体类
            </summary>
            <param name="ds">DataSet</param>
            <returns></returns>
        </member>
        <member name="M:System.Data.DataSetEx.FillModel``1(System.Data.DataSet,System.Int32)">
            <summary>  
            填充对象列表：用DataSet的第index个表填充实体类
            </summary>  
        </member>
        <member name="M:System.Data.DataSetEx.ToList``1(System.Data.DataSet,System.Int32)">
            <summary>
            转List集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ds"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.DataTableEx.FillModel``1(System.Data.DataTable)">
            <summary>  
            填充对象列表：用DataTable填充实体类
            </summary>  
        </member>
        <member name="M:System.Data.DataTableEx.ToList``1(System.Data.DataTable)">
            <summary>
            将DataTable转成List
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.DataTableEx.CreateData``1(``0)">
            <summary>
            根据实体类得到表结构
            </summary>
            <param name="model">实体类</param>
            <returns></returns>
        </member>
        <member name="T:System.ReflectionEx">
            <summary>
            反射扩展方法(Reflection)
            </summary>
        </member>
        <member name="M:System.ReflectionEx.GetDefaultValue(System.ComponentModel.PropertyDescriptor)">
            <summary>
            获取属性的描述特性
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:System.ReflectionEx.GetDefaultValue(System.Reflection.PropertyInfo)">
            <summary>
            获取属性的默认值
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:System.ReflectionEx.GetTypeOfParent(System.Web.UI.Control,System.String)">
            <summary>
            获取当前UI控件的父类型
            </summary>
            <param name="control"></param>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:System.ReflectionEx.GetTypeOfParent(System.Web.UI.Control,System.Type)">
            <summary>
            
            </summary>
            <param name="control"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:System.Collections.Generic.DictionaryEx">
            <summary>
            Dictionary的扩展方法类
            </summary>
        </member>
        <member name="M:System.Collections.Generic.DictionaryEx.TryAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            尝试将键和值添加到字典中：如果不存在，才添加；存在，不添加也不抛导常
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.DictionaryEx.AddOrReplace``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            将键和值添加或替换到字典中：如果不存在，则添加；存在，则替换
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="T:System.Collections.Generic.IEnumerableEx">
            <summary>
            Enumerable可枚举的扩展方法
            </summary>
        </member>
        <member name="M:System.Collections.Generic.IEnumerableEx.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.IEnumerableEx.SplitByChars(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            转成字符串，使用固定分割分进行分割
            </summary>
            <param name="instance"></param>
            <param name="splitChars"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.IEnumerableEx.Alternate``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            两个集合对应索引的元素拼接(集合1:a1,a2 集合2:b1,b2  结果:a1,b1,a2,b2)
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.IEnumerableEx.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            在一个集合后面追加一个集合
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.IEnumerableEx.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            在一个集合前面追加一个集合
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.IEnumerableEx.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="T:System.Xml.XmlDocumentEx">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.ByteEx.ToHexString(System.Byte[])">
            <summary>
            字节数组帮助
            </summary>
            <param name="btArray"></param>
            <returns></returns>
        </member>
        <member name="M:System.DateTimeEx.GetTimeStampString(System.DateTime,System.Boolean)">
            <summary>
            获取某个时间的时间戳(字符串)，将当前时间转为UTC
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:System.DateTimeEx.GetTimeStamp(System.DateTime,System.Boolean)">
            <summary>
            获取某个时间的时间戳(浮点数)，将当前时间转为UTC
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:System.DateTimeEx.ConvertStringToDateTime(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="T:System.EnumEx">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.EnumEx.ToInt(System.Enum)">
            <summary>
            枚举转Int数值
            </summary>
            <typeparam name="Enum">枚举对象类型</typeparam>
            <param name="enumObj">枚举对象</param>
            <returns></returns>
        </member>
        <member name="M:System.EnumEx.GetDescription(System.Enum)">
            <summary>
            获取枚举的Description描述
            </summary>
            <typeparam name="Enum"></typeparam>
            <param name="enumObj"></param>
            <returns></returns>
        </member>
        <member name="M:System.EnumEx.ToDictionary``1(``0)">
            <summary>
            将枚举以字典的形式返回
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="enumObj"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:System.EnumEx.ToIEnumerable``1(``0)”忽略有格式错误的 XML 注释 -->
        <member name="M:System.EnumEx.ToEnumList``1(``0)">
            <summary>
            返回枚举值列表
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="enumObj"></param>
            <returns></returns>
        </member>
        <member name="T:System.IListEx">
            <summary>
            对实现IList接口的类扩展方法
            </summary>
        </member>
        <member name="M:System.IListEx.Clone``1(System.Collections.Generic.IList{``0})">
            <summary>
            对一个集合深克隆(T必须实现ICloneable接口)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:System.IListEx.FillDataSet``1(System.Collections.Generic.IList{``0})">
            <summary>
            实体类转换成DataSet
            </summary>
            <param name="modelList">实体类列表</param>
            <returns></returns>
        </member>
        <member name="M:System.IListEx.FillDataTable``1(System.Collections.Generic.IList{``0})">
            <summary>
            实体类转换成DataTable
            </summary>
            <param name="modelList">实体类列表</param>
            <returns></returns>
        </member>
        <member name="M:System.ExceptionEx.GetAllExceptionMessage(System.Exception,System.Boolean,System.String)">
            <summary>
            返回异常所有信息
            </summary>
            <param name="webHuanHang">是否为web换行</param>
            <param name="style">样式: color:red;  </param>
            <returns></returns>
        </member>
        <member name="T:System.IntEx">
            <summary>
            Int的扩展方法
            </summary>
        </member>
        <member name="M:System.IntEx.ForEach``1(System.Int32,System.Action{System.Int32})">
            <summary>
            执行n次循环(从零开始)
            </summary>
            <typeparam name="Int32"></typeparam>
            <param name="instance"></param>
            <param name="action">带整形参数的委托</param>
            <returns></returns>
        </member>
        <member name="M:System.IntEx.ToByte(System.Int32)">
            <summary>
            整形转字节
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:System.IntEx.ToKB(System.Int32)">
            <summary> 
            Kilobytes 
            </summary> 
            <param name="value"></param> 
            <returns></returns> 
        </member>
        <member name="M:System.IntEx.ToMB(System.Int32)">
            <summary> 
            Megabytes 
            </summary> 
            <param name="value"></param> 
            <returns></returns> 
        </member>
        <member name="M:System.IntEx.ToGB(System.Int32)">
            <summary> 
            Gigabytes 
            </summary> 
            <param name="value"></param> 
            <returns></returns> 
        </member>
        <member name="M:System.IntEx.ToTB(System.Int32)">
            <summary> 
            Terabytes 
            </summary> 
            <param name="value"></param> 
            <returns></returns> 
        </member>
        <member name="T:System.ObjectEx">
            <summary>
            对object进行扩展(很基础的)
            </summary>
        </member>
        <member name="M:System.ObjectEx.ToJsonString(System.Object)">
            <summary>
            任意对象转json字符串
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectEx.GetClassName(System.Object,System.Int32)">
            <summary>
            获取当前执行方法的类名(包含命名空间)
            </summary>
            <param name="o"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectEx.GetMethodName(System.Object,System.Int32)">
            <summary>
            获取当前方法的名称(包含命名空间)
            </summary>
            <param name="o"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectEx.ToAnonymousCast``1(System.Object,``0)">
            <summary>
            将一个对象转换为匿名类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="o"></param>
            <param name="example"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectEx.ToBoolean(System.Object)">
            <summary>
            转bool值
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectEx.CloneByNewtonsoft``1(``0)">
            <summary>
            克隆一个对象(借助于Newtonsoft.Json.dll,属于深克隆)
            </summary>
            <typeparam name="T">克隆的对象的类型</typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectEx.Apply``1(``0,``0)">
            <summary>
            克隆所有属性(适合单个对象)
            </summary>
            <param name="target"></param>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectEx.Apply``1(``0,``0,System.Boolean)">
            <summary>
            克隆所有属性(适合单个对象)
            </summary>
            <param name="target"></param>
            <param name="from"></param>
            <param name="ignoreDefaultValues">忽略默认值</param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectEx.If``1(``0,System.Func{System.Boolean},``0,``0)">
            <summary>
            如果test成功,返回valueIfTrue,否则返回valueIfFalse
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="test"></param>
            <param name="valueIfTrue"></param>
            <param name="valueIfFalse"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectEx.IfNot``1(``0,System.Func{System.Boolean},``0,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="test"></param>
            <param name="valueIfTrue"></param>
            <param name="valueIfFalse"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectEx.IfNull``1(``0,``0)">
            <summary>
            如果为null设置一个默认值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="valueIfNull">为null时的默认值</param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectEx.IsNull``1(``0)">
            <summary>
            判断当前对象是否为null
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectEx.NotNull``1(``0)">
            <summary>
            判断不为null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectEx.ToGuid(System.Object)">
            <summary>
            转成Guid类型
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectEx.ToGuidNullable(System.Object)">
            <summary>
            转成Guid类型
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectEx.ToInt(System.Object)">
            <summary>
            转值类型Int32
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectEx.ToInt16(System.Object)">
            <summary>
            转值类型Int16
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectEx.ToInt32(System.Object)">
            <summary>
            转值类型Int32
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectEx.ToInt64(System.Object)">
            <summary>
            转值类型Int64
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectEx.ToDecimal(System.Object)">
            <summary>
            转值类型Decimal
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectEx.ToDouble(System.Object)">
            <summary>
            转值类型Double
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectEx.ToDateTime2(System.Object)">
            <summary>
            转时间DateTime
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:System.StringEx">
            <summary>
            String扩展方法类
            </summary>
        </member>
        <member name="M:System.StringEx.JsonToObject``1(System.String)">
            <summary>
            Json串转任意类型
            </summary>
            <typeparam name="T">要转换成的目标类型</typeparam>
            <param name="jsonString">要转换的Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:System.StringEx.IsJson(System.String)">
            <summary>
            判断是否为正确的json串
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringEx.ToType(System.String,System.Type)">
            <summary>
            字符串转值类型方法
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringEx.ToValueType``1(System.String)">
            <summary>
            字符串转值类型方法
            </summary>
            <typeparam name="T">值类型(int decimal double byte)</typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringEx.ToEnumType``1(System.String)">
            <summary>
            转换成为枚举类型
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="strEnum"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringEx.IsNullOrEmpty(System.String)">
            <summary>
            判断字符串是否为null或者空字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringEx.NotNullAndEpmty(System.String)">
            <summary>
            字符串不为null且不为Empty
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringEx.FormatWith(System.String,System.Object[])">
            <summary>
            将指定字符串中的格式项替换为指定数组中相应对象的字符串表示形式。
            </summary>
            <param name="value">复合格式字符串。</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
            <returns></returns>
        </member>
        <member name="M:System.StringEx.FormatJsonString(System.String)">
            <summary>
            格式化Json字符串
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringEx.ToDBC(System.String)">
            <summary>
            英文全角转换为半角字符串("wｗｘｙ"=>"wwxy")
            </summary>
        </member>
        <member name="M:System.StringEx.ToSBC(System.String)">
            <summary>
            任意字符串半角转全角(SBC case)
            </summary>
            <param name="input">任意字符串</param>
            <returns>全角字符串</returns>
        </member>
        <member name="M:System.StringEx.ToChineseSimplified(System.String)">
            <summary>
            繁体中文转换为简体中文
            </summary>
        </member>
        <member name="M:System.StringEx.ToChineseTraditional(System.String)">
            <summary>
            简体中文转换为繁体中文
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringEx.IsMatch(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringEx.Match(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringEx.ToXmlDocument(System.String)">
            <summary>
            xml字符串转XmlDocument
            </summary>
            <param name="strXml"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringEx.ToXmlNode(System.String)">
            <summary>
            xml字符串转XmlNode
            </summary>
            <param name="strXml"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringEx.GetCharSpellCode(System.String)">
            <summary>
            得到一个汉字的拼音第一个字母，如果是一个英文字母则直接返回大写字母
            </summary>
            <param name="CnChar">单个汉字</param>
            <returns>单个大写字母</returns>
        </member>
        <member name="M:System.StringEx.GetSpellCode(System.String)">
            <summary>
            在指定的字符串列表CnStr中检索符合拼音索引字符串
            </summary>
            <param name="CnStr">汉字字符串</param>
            <returns>相对应的汉语拼音首字母串</returns>
        </member>
        <member name="M:System.TypeEx.MemberType(System.Reflection.MemberInfo)">
            <summary>
            判断该成员对象的类型(方法、构造函数何事件等)
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeEx.ContainsGenericParameters(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeEx.IsGenericType(System.Type)">
            <summary>
            判断当前类型是否是泛型类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeEx.IsGenericTypeDefinition(System.Type)">
            <summary>
            获取一个值，该值指示当前 System.Type 是否表示可以用来构造其他泛型类型的泛型类型定义。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeEx.BaseType(System.Type)">
            <summary>
            返回当前类型的基类
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeEx.IsEnum(System.Type)">
            <summary>
            判断当前类型是否表示枚举
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeEx.IsClass(System.Type)">
            <summary>
            判断当前类型是否是一个类(不是值类型或接口)
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeEx.IsSealed(System.Type)">
            <summary>
            返回当前类型是否是密封类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeEx.IsAbstract(System.Type)">
            <summary>
            判断类型是否是抽象的且必须被重写
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeEx.IsVisible(System.Type)">
            <summary>
            是否可以被程序及外部的代码访问
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeEx.IsValueType(System.Type)">
            <summary>
            判断是否是值类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeEx.GetGenericMethod(System.Type,System.String,System.Type[])">
            <summary>
            按名称和参数查找方法对象
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="parameterTypes"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeEx.HasParameters(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            获取某个方法的参数
            </summary>
            <param name="method"></param>
            <param name="parameterTypes"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeEx.GetAllInterfaces(System.Type)">
            <summary>
            获取当前类实现或者继承的所有接口
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeEx.GetAllMethods(System.Type)">
            <summary>
            获取所有方法
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:System.TypeEx.IsNullable(System.Type)">
            <summary>
            判断给类型是否可以为空
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:System.Xml.XmlNodeEx">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Xml.XmlNodeEx.ToJsonString(System.Xml.XmlNode)">
            <summary>
            XmlNode转json串
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:IDCardRead.IReadIDCard">
            <summary>
            读取身份证信息接口
            </summary>
        </member>
        <member name="M:IDCardRead.IReadIDCard.ReadPersonInfo">
            <summary>
            读取身份信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:IDCardRead.PersonInfo.Name">
            <summary>
            姓名
            </summary>
        </member>
        <member name="P:IDCardRead.PersonInfo.Birthday">
            <summary>
            生日
            </summary>
        </member>
        <member name="P:IDCardRead.PersonInfo.CardNO">
            <summary>
            证件号码
            </summary>
        </member>
        <member name="P:IDCardRead.PersonInfo.Address">
            <summary>
            籍贯
            </summary>
        </member>
        <member name="P:IDCardRead.PersonInfo.Sex">
            <summary>
            性别
            </summary>
        </member>
        <member name="P:IDCardRead.PersonInfo.Nation">
            <summary>
            民族
            </summary>
        </member>
        <member name="P:IDCardRead.PersonInfo.GrantDept">
            <summary>
            发证机关
            </summary>
        </member>
        <member name="P:IDCardRead.PersonInfo.IDCardBeginDate">
            <summary>
            有效期开始日期
            </summary>
        </member>
        <member name="P:IDCardRead.PersonInfo.IDCardEndDate">
            <summary>
            有效期结束日期
            </summary>
        </member>
        <member name="P:IDCardRead.PersonInfo.Photo">
            <summary>
            照片
            </summary>
        </member>
        <member name="M:IDCardRead.ReadIDCard.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="assemblyName"></param>
            <param name="readTypeName"></param>
            <param name="iport">1001-1006为USB端口</param>
            <param name="readIDCardRemark"></param>
        </member>
        <member name="M:IDCardRead.ReadIDCard.Read">
            <summary>
            读取
            </summary>
            <returns></returns>
        </member>
        <member name="T:COMMON.Logs.Log">
            <summary>
                <appSettings>使用配置文件,不适用默认在操作系统盘符根目录下的Logs文件夹下
                    <!--日志文件路径-->
                    <add key="LogPath" value="Logs\"/>
                    <!--日志文件的后缀名-->
                    <add key="LogExName" value=".log"/>
                </appSettings>
            </summary>
        </member>
        <member name="M:COMMON.Logs.Log.WriteLog(System.String)">
            <summary>
            记录调试日志
            </summary>
            <param name="title"></param>
        </member>
        <member name="M:COMMON.Logs.Log.WriteLog(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="title"></param>
        </member>
        <member name="M:COMMON.Logs.Log.WriteLog(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            记录调试日志
            </summary>
            <param name="title"></param>
            <param name="msgList"></param>
        </member>
        <member name="M:COMMON.Logs.Log.WriteLog(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            
            </summary>
            <param name="selfDefineFileName"></param>
            <param name="title"></param>
            <param name="msgList"></param>
        </member>
        <member name="M:COMMON.Logs.Log.WriteException(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="exception"></param>
        </member>
        <member name="M:COMMON.Logs.Log.WriteException(System.String,System.Exception,System.String)">
            <summary>
            (日期-自定义名)自定义文件名的记录异常
            </summary>
            <param name="title">日志标题</param>
            <param name="exception">异常对象</param>
            <param name="selfDefineFileName">自定义的文件名</param>
        </member>
        <member name="M:COMMON.Logs.Log.WriteMsg(System.Text.StringBuilder,System.String)">
            <summary>
            日志文件写消息
            </summary>
            <param name="strBuild"></param>
            <param name="selfDefineName"></param>
        </member>
        <member name="T:COMMON.Logs.LogSort">
            <summary>
            日志归档
            </summary>
        </member>
        <member name="E:COMMON.Logs.LogSort.NewDirection_Create">
            <summary>
            新目录创建(同步)
            </summary>
        </member>
        <member name="E:COMMON.Logs.LogSort.BeforeSort">
            <summary>
            归档所有日志之前
            </summary>
        </member>
        <member name="E:COMMON.Logs.LogSort.AfterSort">
            <summary>
            归档所有日志完成之后
            </summary>
        </member>
        <member name="E:COMMON.Logs.LogSort.BeforeSortOne_Update">
            <summary>
            归档某一个日志之前
            </summary>
        </member>
        <member name="E:COMMON.Logs.LogSort.AfterSortOne_Update">
            <summary>
            归档某一个日志完成之后
            </summary>
        </member>
        <member name="E:COMMON.Logs.LogSort.AfterSortOne_Exception">
            <summary>
            归档某一个日志发生异常
            </summary>
        </member>
        <member name="T:COMMON.Net.HttpClient.HttpCookieType">
            <summary>
            Cookie对应类
            </summary>
        </member>
        <member name="P:COMMON.Net.HttpClient.HttpCookieType.CookieCollection">
            <summary>
            cookie集合
            </summary>
        </member>
        <member name="P:COMMON.Net.HttpClient.HttpCookieType.CookieString">
            <summary>
            Cookie字符串
            </summary>
        </member>
        <member name="T:COMMON.Net.HttpClient.HttpRequestParameter">
            <summary>
            请求参数类
            </summary>
        </member>
        <member name="P:COMMON.Net.HttpClient.HttpRequestParameter.IsPost">
            <summary>
            请求方式：true表示post,false表示get
            </summary>
        </member>
        <member name="P:COMMON.Net.HttpClient.HttpRequestParameter.Url">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="P:COMMON.Net.HttpClient.HttpRequestParameter.Cookie">
            <summary>
            请求Cookie对象
            </summary>
        </member>
        <member name="P:COMMON.Net.HttpClient.HttpRequestParameter.Encoding">
            <summary>
            请求编码
            </summary>
        </member>
        <member name="P:COMMON.Net.HttpClient.HttpRequestParameter.Parameters">
            <summary>
            请求参数
            </summary>
        </member>
        <member name="P:COMMON.Net.HttpClient.HttpRequestParameter.ContentInput">
            <summary>
            设置请求流的字节数组
            </summary>
        </member>
        <member name="P:COMMON.Net.HttpClient.HttpRequestParameter.RefererUrl">
            <summary>
            引用页
            </summary>
        </member>
        <member name="T:COMMON.Net.HttpClient.HttpResponseParameter">
            <summary>
            响应参数类
            </summary>
        </member>
        <member name="P:COMMON.Net.HttpClient.HttpResponseParameter.Uri">
            <summary>
            响应资源标识符
            </summary>
        </member>
        <member name="P:COMMON.Net.HttpClient.HttpResponseParameter.StatusCode">
            <summary>
            响应状态码
            </summary>
        </member>
        <member name="P:COMMON.Net.HttpClient.HttpResponseParameter.Cookie">
            <summary>
            响应Cookie对象
            </summary>
        </member>
        <member name="P:COMMON.Net.HttpClient.HttpResponseParameter.Body">
            <summary>
            响应体
            </summary>
        </member>
        <member name="M:COMMON.Net.HttpClient.HttpUtil.Excute(COMMON.Net.HttpClient.HttpRequestParameter)">
            <summary>
            执行方法(直接传入键值对参数)
            </summary>
            <param name="requestParameter">请求报文</param>
            <returns>响应报文</returns>
        </member>
        <member name="M:COMMON.Net.HttpClient.HttpUtil.ExcuteWithStringContent(COMMON.Net.HttpClient.HttpRequestParameter)">
            <summary>
            执行方法(直接传入字符串报文)
            </summary>
            <param name="requestParameter">请求报文(需要设置ContentInput,参数Parameter无效)</param>
            <returns>响应报文</returns>
        </member>
        <member name="M:COMMON.Net.HttpClient.HttpUtil.SetHeader(System.Net.HttpWebRequest,COMMON.Net.HttpClient.HttpRequestParameter)">
            <summary>
            设置请求头
            </summary>
            <param name="webRequest">HttpWebRequest对象</param>
            <param name="requestParameter">请求参数对象</param>
        </member>
        <member name="M:COMMON.Net.HttpClient.HttpUtil.SetCookie(System.Net.HttpWebRequest,COMMON.Net.HttpClient.HttpRequestParameter)">
            <summary>
            设置请求Cookie
            </summary>
            <param name="webRequest">HttpWebRequest对象</param>
            <param name="requestParameter">请求参数对象</param>
        </member>
        <member name="M:COMMON.Net.HttpClient.HttpUtil.CheckValidationResult(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            ssl/https请求
            </summary>
            <param name="sender"></param>
            <param name="certificate"></param>
            <param name="chain"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:COMMON.Net.HttpClient.HttpUtil.SetParameter(System.Net.HttpWebRequest,COMMON.Net.HttpClient.HttpRequestParameter)">
            <summary>
            设置请求参数（只有Post请求方式才设置）
            </summary>
            <param name="webRequest">HttpWebRequest对象</param>
            <param name="requestParameter">请求参数对象</param>
        </member>
        <member name="M:COMMON.Net.HttpClient.HttpUtil.SetResponse(System.Net.HttpWebRequest,COMMON.Net.HttpClient.HttpRequestParameter)">
            <summary>
            返回响应报文
            </summary>
            <param name="webRequest">HttpWebRequest对象</param>
            <param name="requestParameter">请求参数对象</param>
            <returns>响应对象</returns>
        </member>
        <member name="T:System.Net.HttpLib.NamedFileStream">
            <summary>
            NamedFileStream is a simple data structre that holds a file name, and stream
            </summary>
        </member>
        <member name="M:System.Net.HttpLib.NamedFileStream.#ctor(System.String,System.String,System.String,System.IO.Stream)">
            <summary>
            Create a new NamedFileStream
            </summary>
            <param name="name">Form name for file</param>
            <param name="filename">Name of file</param>
            <param name="contentType">Content type of file</param>
            <param name="stream">File Stream</param>
        </member>
        <member name="T:System.Net.HttpLib.ConnectionIssue">
            <summary>
            连接异常
            </summary>
            <param name="ex"></param>
        </member>
        <member name="T:System.Net.HttpLib.RequestClient">
            <summary>
            Request is a static class that holds the http methods
            </summary>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Get(System.String,System.Action{System.String})">
            <summary>
            执行一个返回String的Get请求(Performs a HTTP get operation)
            </summary>
            <param name="url">请求地址(Target url)</param>
            <param name="successCallback">请求成功时回调函数(A function that is called on success)</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Get(System.String,System.Object,System.Action{System.String})">
            <summary>
            执行一个带参数返回String的Get请求(Performs a HTTP get operation with parameters)
            </summary>
            <param name="url">请求地址(Target url)</param>
            <param name="parameters">KVP Array of parameters</param>
            <param name="successCallback">A function that is called on success</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Get(System.String,System.Object,System.Action{System.String},System.Action{System.Net.WebException})">
            <summary>
            Performs a HTTP get operation with parameters and a function that is called on failure
            </summary>
            <param name="url">Target url</param>
            <param name="parameters">KVP Array of parameters</param>
            <param name="successCallback">Function that is called on success</param>
            <param name="failCallback">Function that is called on failure</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Get(System.String,System.Action{System.Net.WebHeaderCollection,System.IO.Stream})">
            <summary>
            (Performs a HTTP get request)
            </summary>
            <param name="url">Target url</param>
            <param name="successCallback">A function that is called on success</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Get(System.String,System.Object,System.Action{System.Net.WebHeaderCollection,System.IO.Stream})">
            <summary>
            Performs a HTTP get request with parameters
            </summary>
            <param name="url">Target url</param>
            <param name="parameters">KVP Array of parameters</param>
            <param name="successCallback">A function that is called on success</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Get(System.String,System.Object,System.Action{System.Net.WebHeaderCollection,System.IO.Stream},System.Action{System.Net.WebException})">
            <summary>
            Performs a HTTP get request with parameters and a function that is called on failure
            </summary>
            <param name="url">Target url</param>
            <param name="parameters">KVP Array of parameters</param>
            <param name="successCallback">Function that is called on success</param>
            <param name="failCallback">Function that is called on failure</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Head(System.String,System.Action{System.String})">
            <summary>
            Performs a HTTP head operation
            </summary>
            <param name="url">Target url</param>
            <param name="successCallback">A function that is called on success</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Head(System.String,System.Object,System.Action{System.String})">
            <summary>
            Performs a HTTP head operation with parameters
            </summary>
            <param name="url">Target url</param>
            <param name="parameters">KVP Array of parameters</param>
            <param name="successCallback">A function that is called on success</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Head(System.String,System.Object,System.Action{System.String},System.Action{System.Net.WebException})">
            <summary>
            Performs a HTTP head operation with parameters and a function that is called on failure
            </summary>
            <param name="url">Target url</param>
            <param name="parameters">KVP Array of parameters</param>
            <param name="successCallback">Function that is called on success</param>
            <param name="failCallback">Function that is called on failure</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Head(System.String,System.Action{System.Net.WebHeaderCollection,System.IO.Stream})">
            <summary>
            Performs a HTTP head operation
            </summary>
            <param name="url">Target url</param>
            <param name="successCallback">A function that is called on success</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Head(System.String,System.Object,System.Action{System.Net.WebHeaderCollection,System.IO.Stream})">
            <summary>
            Performs a HTTP head operation with parameters
            </summary>
            <param name="url">Target url</param>
            <param name="parameters">KVP Array of parameters</param>
            <param name="successCallback">A function that is called on success</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Head(System.String,System.Object,System.Action{System.Net.WebHeaderCollection,System.IO.Stream},System.Action{System.Net.WebException})">
            <summary>
            Performs a HTTP head operation with parameters and a function that is called on failure
            </summary>
            <param name="url">Target url</param>
            <param name="parameters">KVP Array of parameters</param>
            <param name="successCallback">Function that is called on success</param>
            <param name="failCallback">Function that is called on failure</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Post(System.String,System.Object,System.Action{System.String})">
            <summary>
            Performs a HTTP post request on a target with parameters
            </summary>
            <param name="url">Target url</param>
            <param name="parameters">Array of parameters</param>
            <param name="successCallback">Function that is called on success</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Post(System.String,System.Object,System.Action{System.Net.WebHeaderCollection,System.IO.Stream})">
            <summary>
            Performs a HTTP post request on a target with parameters
            </summary>
            <param name="url">Target url</param>
            <param name="parameters">Array of parameters</param>
            <param name="successCallback">Function that is called on success</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Post(System.String,System.Object,System.Action{System.String},System.Action{System.Net.WebException})">
            <summary>
            Performs a HTTP post request with parameters and a fail function
            </summary>
            <param name="url">Target url</param>
            <param name="parameters">Array of parameters</param>
            <param name="successCallback">Function that is called on success</param>
            <param name="failCallback">Function that is called on failure</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Post(System.String,System.Object,System.Action{System.Net.WebHeaderCollection,System.IO.Stream},System.Action{System.Net.WebException})">
            <summary>
            Performs a HTTP post request with parameters and a fail function
            </summary>
            <param name="url">Target url</param>
            <param name="parameters">Array of parameters</param>
            <param name="successCallback">Function that is called on success</param>
            <param name="failCallback">Function that is called on failure</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Patch(System.String,System.Object,System.Action{System.String})">
            <summary>
            Performs a HTTP patch request on a target with parameters
            </summary>
            <param name="url">Target url</param>
            <param name="parameters">Array of parameters</param>
            <param name="successCallback">Function that is called on success</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Patch(System.String,System.Object,System.Action{System.Net.WebHeaderCollection,System.IO.Stream})">
            <summary>
            Performs a HTTP patch request on a target with parameters
            </summary>
            <param name="url">Target url</param>
            <param name="parameters">Array of parameters</param>
            <param name="successCallback">Function that is called on success</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Patch(System.String,System.Object,System.Action{System.String},System.Action{System.Net.WebException})">
            <summary>
            Performs a HTTP patch request with parameters and a fail function
            </summary>
            <param name="url">Target url</param>
            <param name="parameters">Array of parameters</param>
            <param name="successCallback">Function that is called on success</param>
            <param name="failCallback">Function that is called on failure</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Patch(System.String,System.Object,System.Action{System.Net.WebHeaderCollection,System.IO.Stream},System.Action{System.Net.WebException})">
            <summary>
            Performs a HTTP patch request with parameters and a fail function
            </summary>
            <param name="url">Target url</param>
            <param name="parameters">Array of parameters</param>
            <param name="successCallback">Function that is called on success</param>
            <param name="failCallback">Function that is called on failure</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Put(System.String,System.Object,System.Action{System.String})">
            <summary>
            Performs a HTTP put request on a target with parameters
            </summary>
            <param name="url">Target url</param>
            <param name="parameters">Array of parameters</param>
            <param name="successCallback">Function that is called on success</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Put(System.String,System.Object,System.Action{System.Net.WebHeaderCollection,System.IO.Stream})">
            <summary>
            Performs a HTTP put request on a target with parameters
            </summary>
            <param name="url">Target url</param>
            <param name="parameters">Array of parameters</param>
            <param name="successCallback">Function that is called on success</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Put(System.String,System.Object,System.Action{System.String},System.Action{System.Net.WebException})">
            <summary>
            Performs a HTTP put request with parameters and a fail function
            </summary>
            <param name="url">Target url</param>
            <param name="parameters">Array of parameters</param>
            <param name="successCallback">Function that is called on success</param>
            <param name="failCallback">Function that is called on failure</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Put(System.String,System.Object,System.Action{System.Net.WebHeaderCollection,System.IO.Stream},System.Action{System.Net.WebException})">
            <summary>
            Performs a HTTP put request with parameters and a fail function
            </summary>
            <param name="url">Target url</param>
            <param name="parameters">Array of parameters</param>
            <param name="successCallback">Function that is called on success</param>
            <param name="failCallback">Function that is called on failure</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Delete(System.String,System.Object,System.Action{System.String})">
            <summary>
            Performs a HTTP delete request with parameters and a fail function
            </summary>
            <param name="url">Target url</param>
            <param name="parameters">Array of parameters</param>
            <param name="successCallback">Function that is called on success</param>
            <param name="failCallback">Function that is called on failure</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Delete(System.String,System.Object,System.Action{System.Net.WebHeaderCollection,System.IO.Stream})">
            <summary>
            Performs a HTTP delete request with parameters and a fail function
            </summary>
            <param name="url">Target url</param>
            <param name="parameters">Array of parameters</param>
            <param name="successCallback">Function that is called on success</param>
            <param name="failCallback">Function that is called on failure</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Delete(System.String,System.Object,System.Action{System.String},System.Action{System.Net.WebException})">
            <summary>
            Performs a HTTP delete request with parameters and a fail function
            </summary>
            <param name="url">Target url</param>
            <param name="parameters">Array of parameters</param>
            <param name="successCallback">Function that is called on success</param>
            <param name="failCallback">Function that is called on failure</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Delete(System.String,System.Object,System.Action{System.Net.WebHeaderCollection,System.IO.Stream},System.Action{System.Net.WebException})">
            <summary>
            Performs a HTTP delete request with parameters and a fail function
            </summary>
            <param name="url">Target url</param>
            <param name="parameters">Array of parameters</param>
            <param name="successCallback">Function that is called on success</param>
            <param name="failCallback">Function that is called on failure</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Upload(System.String,System.Object,System.Net.HttpLib.NamedFileStream[],System.Action{System.String})">
            <summary>
            Upload an array of files to a remote host using the HTTP post multipart method
            </summary>
            <param name="url">Target url</param>
            <param name="parameters">Parmaters</param>
            <param name="files">An array of files</param>
            <param name="successCallback">funciton that is called on success</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Upload(System.String,System.Object,System.Net.HttpLib.NamedFileStream[],System.Action{System.Net.WebHeaderCollection,System.IO.Stream})">
            <summary>
            Upload an array of files to a remote host using the HTTP post multipart method
            </summary>
            <param name="url">Target url</param>
            <param name="parameters">Parmaters</param>
            <param name="files">An array of files</param>
            <param name="successCallback">funciton that is called on success</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Upload(System.String,System.Object,System.Net.HttpLib.NamedFileStream[],System.Action{System.String},System.Action{System.Net.WebException})">
            <summary>
            Upload an array of files to a remote host using the HTTP post multipart method
            </summary>
            <param name="url">Target url</param>
            <param name="parameters">Parmaters</param>
            <param name="files">An array of files</param>
            <param name="successCallback">Funciton that is called on success</param>
            <param name="failCallback">Function that is called on failure</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Upload(System.String,System.Object,System.Net.HttpLib.NamedFileStream[],System.Action{System.Net.WebHeaderCollection,System.IO.Stream},System.Action{System.Net.WebException})">
            <summary>
            Upload an array of files to a remote host using the HTTP post multipart method
            </summary>
            <param name="url">Target url</param>
            <param name="parameters">Parmaters</param>
            <param name="files">An array of files</param>
            <param name="successCallback">Funciton that is called on success</param>
            <param name="failCallback">Function that is called on failure</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Upload(System.String,System.Net.HttpLib.HttpVerb,System.Object,System.Net.HttpLib.NamedFileStream[],System.Action{System.String},System.Action{System.Net.WebException})">
            <summary>
            Upload an array of files to a remote host using the HTTP post or put multipart method
            </summary>
            <param name="url">Target url</param>
            <param name="method">Request Method - POST or PUT</param>
            <param name="parameters">Parmaters</param>
            <param name="files">An array of files</param>
            <param name="successCallback">Funciton that is called on success</param>
            <param name="failCallback">Function that is called on failure</param>
        </member>
        <member name="M:System.Net.HttpLib.RequestClient.Upload(System.String,System.Net.HttpLib.HttpVerb,System.Object,System.Net.HttpLib.NamedFileStream[],System.Action{System.Net.WebHeaderCollection,System.IO.Stream},System.Action{System.Net.WebException})">
            <summary>
            Upload an array of files to a remote host using the HTTP post or put multipart method
            </summary>
            <param name="url">Target url</param>
            <param name="method">Request Method - POST or PUT</param>
            <param name="parameters">Parmaters</param>
            <param name="files">An array of files</param>
            <param name="successCallback">Funciton that is called on success</param>
            <param name="failCallback">Function that is called on failure</param>
        </member>
        <member name="E:System.Net.HttpLib.RequestClient.ConnectFailed">
            <summary>
            连接失败触发事件
            </summary>
        </member>
        <member name="T:System.Net.HttpLib.Utils">
            <summary>
            This abstract class is a container for utility functions used by HttpLib
            </summary>
        </member>
        <member name="M:System.Net.HttpLib.Utils.SerializeQueryString(System.Object)">
            <summary>
            Serialize an array of Key-Value pairs into a URL encoded query string
            </summary>
            <param name="Parameters">The key-value pair array</param>
            <returns>The URL encoded query string</returns>
        </member>
        <member name="T:COMMON.Net.WebClientUploadEvent">
            <summary>  
            上传事件委托  
            </summary>  
            <param name="sender"></param>  
            <param name="e"></param>  
        </member>
        <member name="T:COMMON.Net.WebClientDownloadEvent">
            <summary>  
            下载事件委托  
            </summary>  
            <param name="sender"></param>  
            <param name="e"></param>  
        </member>
        <member name="T:COMMON.Net.UploadEventArgs">
            <summary>  
            上传事件参数  
            </summary>  
        </member>
        <member name="F:COMMON.Net.UploadEventArgs.totalBytes">
            <summary>  
            上传数据总大小  
            </summary>  
        </member>
        <member name="F:COMMON.Net.UploadEventArgs.bytesSent">
            <summary>  
            已发数据大小  
            </summary>  
        </member>
        <member name="F:COMMON.Net.UploadEventArgs.sendProgress">
            <summary>  
            发送进度(0-1)  
            </summary>  
        </member>
        <member name="F:COMMON.Net.UploadEventArgs.sendSpeed">
            <summary>  
            发送速度Bytes/s  
            </summary>  
        </member>
        <member name="T:COMMON.Net.DownloadEventArgs">
            <summary>  
            下载事件参数  
            </summary>  
        </member>
        <member name="F:COMMON.Net.DownloadEventArgs.totalBytes">
            <summary>  
            下载数据总大小  
            </summary>  
        </member>
        <member name="F:COMMON.Net.DownloadEventArgs.bytesReceived">
            <summary>  
            已接收数据大小  
            </summary>  
        </member>
        <member name="F:COMMON.Net.DownloadEventArgs.ReceiveProgress">
            <summary>  
            接收数据进度(0-1)  
            </summary>  
        </member>
        <member name="F:COMMON.Net.DownloadEventArgs.receivedBuffer">
            <summary>  
            当前缓冲区数据  
            </summary>  
        </member>
        <member name="F:COMMON.Net.DownloadEventArgs.receiveSpeed">
            <summary>  
            接收速度Bytes/s  
            </summary>  
        </member>
        <member name="T:COMMON.Net.WebClient">
            <summary>  
            实现向WEB服务器发送和接收数据  
            </summary>  
        </member>
        <member name="M:COMMON.Net.WebClient.#ctor">
            <summary>  
            初始化WebClient类  
            </summary>  
        </member>
        <member name="M:COMMON.Net.WebClient.gethtmlContent(System.String,System.String,System.String)">
            <summary>  
            获得字符串中开始和结束字符串中间得值  
            </summary>  
            <param name="str"></param>  
            <param name="s">开始</param>  
            <param name="e">结束</param>  
            <returns></returns>  
        </member>
        <member name="M:COMMON.Net.WebClient.htmlConvert(System.String)">
            <summary>  
            过滤HTML字符  
            </summary>  
            <param name="source"></param>  
            <returns></returns>  
        </member>
        <member name="M:COMMON.Net.WebClient.OpenRead(System.String)">
            <summary>  
            读取指定URL的文本  
            </summary>  
            <param name="URL">请求的地址</param>  
            <returns>服务器响应文本</returns>  
        </member>
        <member name="M:COMMON.Net.WebClient.OpenReadWithHttps(System.String,System.String)">
            <summary>  
            采用https协议访问网络  
            </summary>  
            <param name="URL">url地址</param>  
            <param name="strPostdata">发送的数据</param>  
            <returns></returns>  
        </member>
        <member name="M:COMMON.Net.WebClient.OpenRead(System.String,System.String)">
            <summary>  
            读取指定URL的文本  
            </summary>  
            <param name="URL">请求的地址</param>  
            <param name="postData">向服务器发送的文本数据</param>  
            <returns>服务器响应文本</returns>  
        </member>
        <member name="M:COMMON.Net.WebClient.GetStream(System.String,System.String)">
            <summary>  
            读取指定URL的流  
            </summary>  
            <param name="URL">请求的地址</param>  
            <param name="postData">向服务器发送的数据</param>  
            <returns>服务器响应流</returns>  
        </member>
        <!-- 对于成员“M:COMMON.Net.WebClient.UploadFile(System.String,System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:COMMON.Net.WebClient.UploadFile(System.String,System.String,System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:COMMON.Net.WebClient.WriteTextField(System.String)">
            <summary>  
            分析文本域，添加到请求流  
            </summary>  
            <param name="textField">文本域</param>  
        </member>
        <member name="M:COMMON.Net.WebClient.WriteFileField(System.String)">
            <summary>  
            分析文件域，添加到请求流  
            </summary>  
            <param name="fileField">文件域</param>  
        </member>
        <member name="M:COMMON.Net.WebClient.DownloadData(System.String)">
            <summary>  
            从指定URL下载数据流  
            </summary>  
            <param name="URL">请求地址</param>  
            <returns>数据流</returns>  
        </member>
        <member name="M:COMMON.Net.WebClient.DownloadFile(System.String,System.String)">
            <summary>  
            从指定URL下载文件  
            </summary>  
            <param name="URL">文件URL地址</param>  
            <param name="fileName">文件保存路径,含文件名(如:C:\test.jpg)</param>  
        </member>
        <member name="M:COMMON.Net.WebClient.SendRequestData(System.String,System.String,System.Boolean)">
            <summary>  
            向服务器发送请求  
            </summary>  
            <param name="URL">请求地址</param>  
            <param name="method">POST或GET</param>  
            <param name="showProgress">是否显示上传进度</param>  
        </member>
        <member name="M:COMMON.Net.WebClient.SendRequestData(System.String,System.String)">
            <summary>  
            向服务器发送请求  
            </summary>  
            <param name="URL">请求URL地址</param>  
            <param name="method">POST或GET</param>  
        </member>
        <member name="M:COMMON.Net.WebClient.GetRequestHeaders(System.String)">
            <summary>  
            获取请求头字节数组  
            </summary>  
            <param name="request">POST或GET请求</param>  
            <returns>请求头字节数组</returns>  
        </member>
        <member name="M:COMMON.Net.WebClient.GetHtml">
            <summary>  
            获取服务器响应文本  
            </summary>  
            <returns>服务器响应文本</returns>  
        </member>
        <member name="M:COMMON.Net.WebClient.SaveNetworkStream(System.IO.Stream,System.Boolean)">
            <summary>  
            将网络流保存到指定流  
            </summary>  
            <param name="toStream">保存位置</param>  
            <param name="needProgress">是否显示进度</param>  
        </member>
        <member name="M:COMMON.Net.WebClient.SaveNetworkStream(System.IO.Stream)">
            <summary>  
            将网络流保存到指定流  
            </summary>  
            <param name="toStream">保存位置</param>  
        </member>
        <member name="M:COMMON.Net.WebClient.GetResponseHeader(System.Byte[],System.Int32@)">
            <summary>  
            分析响应流，去掉响应头  
            </summary>  
            <param name="buffer"></param>  
        </member>
        <member name="M:COMMON.Net.WebClient.Cancel">
            <summary>  
            取消上传或下载,要继续开始请调用Start方法  
            </summary>  
        </member>
        <member name="M:COMMON.Net.WebClient.Start">
            <summary>  
            启动上传或下载，要取消请调用Cancel方法  
            </summary>  
        </member>
        <member name="P:COMMON.Net.WebClient.RequestHeaders">
            <summary>  
            获取或设置请求头  
            </summary>  
        </member>
        <member name="P:COMMON.Net.WebClient.ResponseHeaders">
            <summary>  
            获取响应头集合  
            </summary>  
        </member>
        <member name="P:COMMON.Net.WebClient.StrRequestHeaders">
            <summary>  
            获取请求头文本  
            </summary>  
        </member>
        <member name="P:COMMON.Net.WebClient.StrResponseHeaders">
            <summary>  
            获取响应头文本  
            </summary>  
        </member>
        <member name="P:COMMON.Net.WebClient.Cookie">
            <summary>  
            获取或设置Cookie  
            </summary>  
        </member>
        <member name="P:COMMON.Net.WebClient.Encoding">
            <summary>  
            获取或设置编码方式(默认为系统默认编码方式)  
            </summary>  
        </member>
        <member name="P:COMMON.Net.WebClient.RespHtml">
            <summary>  
            获取服务器响应文本  
            </summary>  
        </member>
        <member name="P:COMMON.Net.WebClient.StatusCode">
            <summary>  
            获取服务器响应状态码  
            </summary>  
        </member>
        <member name="T:COMMON.Net.IPAddressHelper">
            <summary>
            IP地址工具类
            </summary>
        </member>
        <member name="M:COMMON.Net.IPAddressHelper.GetLocalMachineIP4Address">
            <summary>
            获取当前机器的IP(IP4)
            </summary>
            <returns></returns>
        </member>
        <member name="M:COMMON.Net.IPAddressHelper.GetLocalMachineIP6Address">
            <summary>
            获取当前机器的IP(IP6)
            </summary>
            <returns></returns>
        </member>
        <member name="T:COMMON.Md5">
             <summary>
            md5 的摘要说明
             </summary>
        </member>
        <member name="M:COMMON.Md5.GetMd5Str16(System.String)">
            <summary>
            MD5 16位加密
            </summary>
            <param name="ConvertString">要加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:COMMON.Md5.GetMd5Str32(System.String)">
            <summary>
            MD5　32位加密
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:COMMON.Md5.MD5Encrypt(System.String,System.String)">
            <summary>
            MD5可逆加密
            </summary>
            <param name="inputStr"></param>
            <param name="sKey"></param>
            <returns></returns>
        </member>
        <member name="M:COMMON.Md5.MD5Decrypt(System.String,System.String)">
            <summary>
            MD5解密
            </summary>
            <param name="inputStr"></param>
            <param name="sKey"></param>
            <returns></returns>
        </member>
        <member name="T:System.Pay.PayHandler">
            <summary>
            支付基类
            </summary>
        </member>
        <member name="M:System.Pay.PayHandler.#ctor(System.Web.HttpRequest,System.Pay.ParmsFromType,System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:System.Pay.PayHandler.CreateSign(System.String)">
            <summary>
            创建签名
            </summary>
            <param name="signKey">签名生成键值对的键名</param>
            <returns></returns>
        </member>
        <member name="M:System.Pay.PayHandler.DoRequest_JsonContent(System.String,System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="Url"></param>
            <param name="IsPost"></param>
            <param name="sign"></param>
            <returns></returns>
        </member>
        <member name="M:System.Pay.PayHandler.QueryStringToValueKey(System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            键值对参数转字符串
            </summary>
            <param name="Dic"></param>
            <param name="IsASCOrder"></param>
            <returns></returns>
        </member>
        <member name="T:System.Pay.OrdinalComparer">
            <summary>
            字符串ASIC码表排序
            </summary>
        </member>
        <member name="T:System.Pay.ParmsFromType">
            <summary>
            参数来源类型
            </summary>
        </member>
        <member name="F:System.Pay.ParmsFromType.QueryString">
            <summary>
            查询字符串
            </summary>
        </member>
        <member name="F:System.Pay.ParmsFromType.Params">
            <summary>
            请求参数
            </summary>
        </member>
        <member name="F:System.Pay.ParmsFromType.Form">
            <summary>
            请求表单
            </summary>
        </member>
        <member name="T:COMMON.SerialPorts.SerialPortHelper0">
            <summary>
            串口通信类
            </summary>
        </member>
        <member name="M:COMMON.SerialPorts.SerialPortHelper0.#ctor">
            <summary>
            默认端口号:COM1
            波特率:9600
            数据位:8
            奇偶校验:None(无)
            标准停止位数:1
            超时时间:100ms:
            </summary>
        </member>
        <member name="F:COMMON.SerialPorts.SerialPortHelper0.PortNum">
            <summary>
            端口号：1、2、3、4......
            </summary>
        </member>
        <member name="F:COMMON.SerialPorts.SerialPortHelper0.BaudRate">
            <summary>
            波特率：1200,2400,4800,9600
            </summary>
        </member>
        <member name="F:COMMON.SerialPorts.SerialPortHelper0.ByteSize">
            <summary>
            每个字节的标准数据位长度(5--8之间)。
            </summary>
        </member>
        <member name="F:COMMON.SerialPorts.SerialPortHelper0.Parity">
            <summary>
            获取或设置奇偶校验检查协议
            0:不发生奇偶校验检查
            1:设置奇偶校验位，使位数等于奇数。
            2:设置奇偶校验位，使位数等于偶数。
            3:将奇偶校验位保留为 1。
            4:将奇偶校验位保留为 0。
            </summary>
        </member>
        <member name="F:COMMON.SerialPorts.SerialPortHelper0.StopBits">
            <summary>
            标准停止位数
            </summary>
        </member>
        <member name="F:COMMON.SerialPorts.SerialPortHelper0.ReadTimeout">
            <summary>
            获取或设置读取操作未完成时发生超时之前的毫秒数
            </summary>
        </member>
        <member name="M:COMMON.SerialPorts.SerialPortHelper0.Open">
            <summary>
            打开串口
            </summary>
        </member>
        <member name="M:COMMON.SerialPorts.SerialPortHelper0.Close">
            <summary>
            关闭串口
            </summary>
        </member>
        <member name="M:COMMON.SerialPorts.SerialPortHelper0.Read(System.Int32)">
            <summary>
            读取串口接收到的数据，返回一个字节数组
            </summary>
            <param name="BytesCount">要读取的字节数</param>
            <returns></returns>
        </member>
        <member name="M:COMMON.SerialPorts.SerialPortHelper0.Write(System.Collections.Generic.List{System.Byte})">
            <summary>
            发送数据
            </summary>
            <param name="listByte">发送字节数组</param>
            <returns>返回值int 表示写入端口的数据个数</returns>
        </member>
        <member name="T:COMMON.SerialPorts.SerialPortHelper">
            <summary>
            串口通信类
            </summary>
        </member>
        <member name="M:COMMON.SerialPorts.SerialPortHelper.#ctor">
            <summary>
            默认端口号:COM1
            波特率:9600
            数据位:8
            奇偶校验:None(无)
            标准停止位数:1
            超时时间:100ms:
            </summary>
        </member>
        <member name="F:COMMON.SerialPorts.SerialPortHelper.PortNum">
            <summary>
            端口号：1、2、3、4......
            </summary>
        </member>
        <member name="F:COMMON.SerialPorts.SerialPortHelper.BaudRate">
            <summary>
            波特率：1200,2400,4800,9600
            </summary>
        </member>
        <member name="F:COMMON.SerialPorts.SerialPortHelper.ByteSize">
            <summary>
            每个字节的标准数据位长度(5--8之间)。
            </summary>
        </member>
        <member name="F:COMMON.SerialPorts.SerialPortHelper.Parity">
            <summary>
            获取或设置奇偶校验检查协议
            0:不发生奇偶校验检查
            1:设置奇偶校验位，使位数等于奇数。
            2:设置奇偶校验位，使位数等于偶数。
            3:将奇偶校验位保留为 1。
            4:将奇偶校验位保留为 0。
            </summary>
        </member>
        <member name="F:COMMON.SerialPorts.SerialPortHelper.StopBits">
            <summary>
            标准停止位数
            </summary>
        </member>
        <member name="F:COMMON.SerialPorts.SerialPortHelper.ReadTimeout">
            <summary>
            获取或设置读取操作未完成时发生超时之前的毫秒数
            </summary>
        </member>
        <member name="F:COMMON.SerialPorts.SerialPortHelper.Opened">
            <summary>
            
            </summary>
        </member>
        <member name="M:COMMON.SerialPorts.SerialPortHelper.Open">
            <summary>
            打开串口
            </summary>
        </member>
        <member name="M:COMMON.SerialPorts.SerialPortHelper.Close">
            <summary>
            关闭串口
            </summary>
        </member>
        <member name="M:COMMON.SerialPorts.SerialPortHelper.Read(System.Int32)">
            <summary>
            读取串口接收到的数据，返回一个字节数组
            </summary>
            <param name="BytesCount">要读取的字节数</param>
            <returns></returns>
        </member>
        <member name="M:COMMON.SerialPorts.SerialPortHelper.Write(System.Collections.Generic.List{System.Byte})">
            <summary>
            发送数据
            </summary>
            <param name="listByte">发送字节数组</param>
            <returns>返回值int 表示写入端口的数据个数</returns>
        </member>
        <member name="M:COMMON.SerialPorts.SerialPortHelper1.SendStringData(System.String,System.Boolean)">
            <summary>
            发完后关闭串口
            </summary>
            <param name="stringData"></param>
        </member>
        <member name="T:COMMON.Validate.Validator">
             <summary>
            数据验证类
             </summary>
        </member>
        <member name="M:COMMON.Validate.Validator.IsEmail(System.String)">
            <summary>
            验证邮箱
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:COMMON.Validate.Validator.IsUrl(System.String)">
            <summary>
            验证网址
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:COMMON.Validate.Validator.IsDateTime(System.String)">
            <summary>
            验证日期
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:COMMON.Validate.Validator.IsMobile(System.String)">
            <summary>
            验证手机号
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:COMMON.Validate.Validator.IsIP(System.String)">
            <summary>
            验证IP
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:COMMON.Validate.Validator.IsIDCard(System.String)">
            <summary>
            验证身份证是否有效
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:COMMON.Validate.Validator.IsInt(System.String)">
            <summary>
            是不是Int型的
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:COMMON.Validate.Validator.IsLengthStr(System.String,System.Int32,System.Int32)">
            <summary>
            看字符串的长度是不是在限定数之间 一个中文为两个字符
            </summary>
            <param name="source">字符串</param>
            <param name="begin">大于等于</param>
            <param name="end">小于等于</param>
            <returns></returns>
        </member>
        <member name="M:COMMON.Validate.Validator.IsTel(System.String)">
            <summary>
            是不是中国电话，格式010-85849685
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:COMMON.Validate.Validator.IsPostCode(System.String)">
            <summary>
            邮政编码 6个数字
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:COMMON.Validate.Validator.IsChinese(System.String)">
            <summary>
            是否为中文
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:COMMON.Validate.Validator.hasChinese(System.String)">
            <summary>
            是否含有中文
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:COMMON.Validate.Validator.IsNormalChar(System.String)">
            <summary>
            验证是不是正常字符 字母，数字，下划线的组合
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:System.Win32_Window.ShowServiceMessage(System.String,System.String)">
            <summary>
            服务程序执行消息提示,前台MessageBox.Show
            </summary>
            <param name="message">消息内容</param>
            <param name="title">标题</param>
        </member>
        <member name="M:System.Win32_Window.CreateProcessAsUser(System.IntPtr,System.String,System.String,System.IntPtr,System.IntPtr,System.Boolean,System.UInt32,System.String,System.String,System.Win32_Window.STARTUPINFO@,System.Win32_Window.PROCESS_INFORMATION@)">
            <summary>
            以当前登录的windows用户(角色权限)运行指定程序进程
            </summary>
            <param name="hToken"></param>
            <param name="lpApplicationName">指定程序(全路径)</param>
            <param name="lpCommandLine">参数</param>
            <param name="lpProcessAttributes">进程属性</param>
            <param name="lpThreadAttributes">线程属性</param>
            <param name="bInheritHandles"></param>
            <param name="dwCreationFlags"></param>
            <param name="lpEnvironment"></param>
            <param name="lpCurrentDirectory"></param>
            <param name="lpStartupInfo">程序启动属性</param>
            <param name="lpProcessInformation">最后返回的进程信息</param>
            <returns>是否调用成功</returns>
        </member>
        <member name="M:System.Win32_Window.CreateProcess(System.String,System.String)">
            <summary>
            以当前登录系统的用户角色权限启动指定的进程
            </summary>
            <param name="ChildProcName">指定的进程(全路径)</param>
        </member>
        <member name="T:System.Win32_Window.STARTUPINFO">
            <summary> 
            Struct, Enum and P/Invoke Declarations for CreateProcessAsUser. 
            </summary> 
             
        </member>
        <member name="T:System.Windows.Forms.MessageBoxExHelper">
            <summary>
            Window提示框帮助类
            </summary>
        </member>
        <member name="M:System.Windows.Forms.MessageBoxExHelper.ShowException(System.Exception,System.String)">
            <summary>
            显示异常详细信息
            </summary>
            <param name="ex"></param>
            <param name="title"></param>
            <returns></returns>
        </member>
    </members>
</doc>
